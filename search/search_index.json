{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>One stop integration documentation of Mimi SDK for Android platform.</p>"},{"location":"advanced-processing/","title":"Advanced Processing","text":""},{"location":"advanced-processing/#observing-changes-in-the-processingparameter-state","title":"Observing changes in the <code>ProcessingParameter</code> state","text":""},{"location":"advanced-processing/#example-for-observing-changes-in-parameter-values","title":"Example for observing changes in parameter values","text":"<pre><code>// Observer for a MimiProcessingParameter, for example: isEnabled\nactiveSession.isEnabled.observe { state -&gt;\n    // add your code here to handle changes in the parameter state\n}\n</code></pre> <p>You should call this function usually right after you have activated the processing session.  i.e For demonstration purpose we will be calling it inside <code>onCreate()</code>, right after activating  processing session as per earlier example:</p> <pre><code>override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        lifecycleScope.launchWhenCreated {\n            activateProcessingSession()\n\n            // Function called after activating processing session\n            setupObserver()\n        }\n    }\n</code></pre>"},{"location":"integration/","title":"Integration","text":""},{"location":"integration/#credentials","title":"Credentials","text":"<p>Add credentials in project's local.properties</p> <pre><code># ========================= Mimi =========================\n# Mimi Portal Access Credentials\nmimiMavenUser=PORTAL_USERNAME\nmimiMavenPassword=PORTAL_PASSWORD\n\n# Client Credentials\n# NOTE: The quotes are needed around value string\nmimiClientID=\"CLIENT_ID\"\nmimiClientSecret=\"CLIENT_SECRET\"\n# ========================================================\n</code></pre>"},{"location":"integration/#dependency","title":"Dependency","text":"<p>Add helper function to the end of root <code>build.gradle</code> file to get values from <code>local.properties</code> file:</p> <pre><code>//region Get ENV vars\ndef getBuildProperty(String localProperty, String environmentVariable, String orDefault = \"undefined\") {\n    return getLocalProperty(localProperty) ?: System.getenv(environmentVariable) ?: orDefault\n}\n\ndef getLocalProperty(String key) {\n    Properties localProperties = new Properties()\n    if (file(\"local.properties\").exists()) {\n        localProperties.load(file(\"local.properties\").newDataInputStream())\n    }\n    return localProperties[key]\n}\n//endregion\n</code></pre> <p>Next, add mimi maven repo inside your <code>repositories</code> block.</p> <ul> <li>If your <code>repositories</code> block is inside project/build.gradle </li> </ul> <pre><code>allprojects {\n    // Define Build properties\n    ext {\n        mimiMavenUser = getBuildProperty(\"mimiMavenUser\", \"PORTAL_USERNAME\")\n        mimiMavenPassword = getBuildProperty(\"mimiMavenPassword\", \"PORTAL_PASSWORD\")\n    }\n\n    repositories {\n        google()\n        mavenCentral()\n\n        // Mimi artifacts repository\n        maven {\n            url \"https://api.integrate.mimi.io/files/sdk/android\"\n            credentials {\n                username = \"${mimiMavenUser}\"\n                password = \"${mimiMavenPassword}\"\n            }\n            authentication {\n                basic(BasicAuthentication)\n            }\n        }\n    }\n}\n</code></pre> <ul> <li>If your <code>repositories</code> block is inside project/settings.gradle</li> </ul> <pre><code>dependencyResolutionManagement {\n    // Define Build properties\n    ext {\n        mimiMavenUser = getBuildProperty(\"mimiMavenUser\", \"PORTAL_USERNAME\")\n        mimiMavenPassword = getBuildProperty(\"mimiMavenPassword\", \"PORTAL_PASSWORD\")\n    }\n\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n    repositories {\n        google()\n        mavenCentral()\n\n        // Mimi artifacts repository\n        maven {\n            url \"https://api.integrate.mimi.io/files/sdk/android\"\n            credentials {\n                username = \"${mimiMavenUser}\"\n                password = \"${mimiMavenPassword}\"\n            }\n            authentication {\n                basic(BasicAuthentication)\n            }\n        }\n    }\n}\n</code></pre> <p>Finally inside the root <code>build.gradle</code> file add <code>ext</code> properties like below:</p> <pre><code>ext {\n    mimiClientID = getBuildProperty(\"mimiClientID\", \"CLIENT_ID\")\n    mimiClientSecret = getBuildProperty(\"mimiClientSecret\", \"CLIENT_SECRET\")\n    // Define MSDK version here\n    msdkVer = \"10.2.0\"\n}\n</code></pre> <p>Inside app/build.gradle</p> <ul> <li>Add <code>buildConfigField</code> under <code>defaultConfig</code>:  </li> </ul> <pre><code>android {\n    ...\n\n    defaultConfig {\n        ...\n\n        buildConfigField(\"String\", \"MY_CLIENT_ID\", rootProject.ext.mimiClientID)\n        buildConfigField(\"String\", \"MY_CLIENT_SECRET\", rootProject.ext.mimiClientSecret)\n    }\n}\n</code></pre> <ul> <li>Add mimi sdk under <code>dependencies</code> section inside your app's <code>build.gradle</code> file:  </li> </ul> <pre><code>dependencies {\n    // Include your other dependencies here...\n\n    // Mimi SDK\n    implementation \"io.mimi:sdk:$rootProject.ext.msdkVer\"\n}\n</code></pre> <p>Sync/Make your project now so that all dependencies are downloaded and BuildConfig fields are generated</p>"},{"location":"integration/#init-msdk","title":"Init MSDK","text":"<p>Start <code>MimiCore</code> inside your custom Application class's <code>onCreate()</code>. For example, let's say your custom Application class is called <code>MyApp</code>. Then</p> <pre><code>import io.mimi.sdk.core.MimiConfiguration\nimport io.mimi.sdk.core.MimiCore\n\nclass MyApp : Application() {\n\n    override fun onCreate() {\n        super.onCreate()\n        initializeMimiCore(this)\n    }\n\n    private fun initializeMimiCore(context: Context) {\n        MimiCore.start(\n                context = context,\n                configuration = MimiConfiguration(),\n                clientId = BuildConfig.MY_CLIENT_ID,\n                clientSecret = BuildConfig.MY_CLIENT_SECRET\n        )\n    }\n}\n</code></pre> <p>Note</p> <p>First setup the function to only log while in debug mode: <pre><code>private fun enableMimiSDKLogs() {\n    io.mimi.sdk.core.util.Log.isEnabled = BuildConfig.DEBUG\n}\n</code></pre> Next, call this function just before initializing the MSDK (MimiCore.start() ) <pre><code>private fun initializeMimiCore(context: Context) {\n    enableMimiSDKLogs()\n    MimiCore.start(...)\n}\n</code></pre></p>"},{"location":"integration/#wire-in-application-class","title":"Wire in Application class","text":"<p>Make sure <code>MyApp</code> is added to <code>application</code> tag inside <code>AndroidManifest.xml</code></p> <pre><code>&lt;application\n    android:name=\".MyApp\" ...&gt;\n</code></pre> <p>Add required permission declarations inside AndroidManifest.xml. </p> <p>Skip if you already have them declared</p> <pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n</code></pre>"},{"location":"processing/","title":"Processing","text":""},{"location":"processing/#component-info","title":"Component Info","text":"<p>Read about the various components here</p>"},{"location":"processing/#initialization-and-activation","title":"Initialization and Activation","text":"<ul> <li> <p>Once you have already initialized <code>MimiCore</code>, you can access the Processing APIs from the <code>ProcessingController</code> and activate a <code>ProcessingSession</code> to add <code>Applicator</code>s and modify <code>ProcessingParameter</code> values.</p> </li> <li> <p>When activating a <code>ProcessingSession</code>, you need to provide a <code>Fitting</code> value.</p> <p><code>Fitting</code> model provides data about the current processing environment and in turn how presets should be generated.</p> </li> </ul> <p>Example:</p> <p>Setup processing controller and session in your MainActivity.kt file</p> <pre><code>override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n\n    // Your code\n\n    /*\n     * ----- Mimi code -----\n     * Executing this line would\n     * 1. Deactivate session\n     * 2. Activate session on configuration change\n     *\n     * This means if there are references to the old ProcessingSession\n     * which have been held at a different lifecycle scope, then they\n     * become invalid.\n     * \n     * This should be called at the right point in your code flow.\n     * This is an example to show it being called in onCreate(). but can\n     * be called later in lifecycle as per business use-case requirement\n     */\n    lifecycleScope.launch {\n        repeatOnLifecycle(Lifecycle.State.CREATED) {\n            activateProcessingSession()\n        }\n    }\n}\n\nprivate suspend fun activateProcessingSession() {\n    val processingController = MimiCore.processingController\n    val upDownDataSourceConfig = MimiPresetParameterDataSourceConfiguration.UpDown(fitting = getTechLevelFromFirmware())\n        val upDownPresetDataSource = MimiCore.personalizationController.createPresetParameterDataSource(upDownDataSourceConfig)\n        processingController.activateSession(upDownPresetDataSource)\n}\n\nprivate fun getTechLevelFromFirmware(): Fitting {\n    // Usually requested via Bluetooth connection\n    // This is hardcoded as an example\n    return Fitting(techLevel = 4)\n}\n</code></pre>"},{"location":"processing/#processingparameter-operations","title":"<code>ProcessingParameter</code> Operations","text":""},{"location":"processing/#reading-the-processingparameter-state","title":"Reading the <code>ProcessingParameter</code> state","text":"<ul> <li>You need access to activeSession to read value from <code>ProcessingParameter</code></li> </ul> <pre><code>// Acquire the active ProcessSession (assumes already activated!)\nprivate val activeSession: ProcessingSession by lazy {\n    requireNotNull(MimiCore.processingController.activeSession.state)\n}\n</code></pre>"},{"location":"processing/#example-for-accessing-isenabled-parameter","title":"Example for accessing isEnabled parameter","text":"<p>The same style applies to other parameters i.e <code>preset</code> and <code>intensity</code>.</p> <p>Get the <code>value</code>:</p> <pre><code>// To force getting a value from a Parameter,\n// Usage: val isEnabledValue = getIsEnabledParam()\nfun getIsEnabledParam() = activeSession.isEnabled.value\n</code></pre> <p><code>observe</code> the changes in value:</p> <p>Refer to Advanced Processing</p>"},{"location":"processing/#setting-the-processingparameter-state","title":"Setting the <code>ProcessingParameter</code> state","text":""},{"location":"processing/#defining-your-own-applicator","title":"Defining your own Applicator","text":"<p>When creating an <code>Applicator</code>, we recommend delegating your <code>canApply</code> and <code>apply</code> functions to a class containing your custom processing logic. This custom processing logic depends entirely on your processing system. Generally, this approach helps make your code more modular and testable.</p> <p>Note: This is simplified sample code to demonstrate the general sequence and may not reflect the best structure for your particular usecase.</p>"},{"location":"processing/#setup-mimiprocessingapplicator","title":"Setup MimiProcessingApplicator","text":"<p>This class contains custom logic related to how MSDK will transfer the changes to Processing unit i.e bluetooth headset as bluetooth packets.</p> <pre><code>import android.util.Log\nimport io.mimi.sdk.core.model.personalization.Personalization\n\nclass MimiProcessingApplicator {\n\n    private val TAG: String = this.javaClass.simpleName\n\n    fun setPreset(preset: Personalization.PersonalizationPreset?) {\n        if (preset == null) {\n            clearMimiCommand()\n        } else {\n            Log.d(TAG, \"Send the values to the external device via bluetooth $preset\")\n        }\n    }\n\n    fun setIntensity(intensity: Double) {\n        Log.d(TAG, \"Send the values to the external device via bluetooth $intensity\")\n    }\n\n    fun setEnabled(enabled: Boolean) {\n        Log.d(TAG, \"Send the values to the external device via bluetooth $enabled\")\n    }\n\n    private fun clearMimiCommand() {\n        Log.d(TAG, \"Send Clear Command to external device via bluetooth\")\n    }\n}\n</code></pre>"},{"location":"processing/#example-for-creating-an-isenabled-parameter-applicator","title":"Example for creating an isEnabled parameter applicator","text":"<pre><code>class IsEnabledApplicator(private val applicator: MimiProcessingApplicator) {\n    fun canApply() = true\n\n    fun apply(enabled: Boolean) = applicator.setEnabled(enabled)\n}\n</code></pre>"},{"location":"processing/#wireup-applicator-in-mainactivitykt","title":"Wireup applicator in MainActivity.kt","text":"<p><pre><code>// Declare an instance; depending on your usecase, you may want this to be a singleton.\nprivate val mimiProcessingApplicator = MimiProcessingApplicator()\nprivate val isEnabledApplicator = IsEnabledApplicator(mimiProcessingApplicator)\n\n// TODO - You should use an appropriate value for your integration.\nprivate val APPLY_TIMEOUT: Long = 10_000L\n\nsuspend fun addIsEnabledApplicator(\n    isEnabledParam: MimiProcessingParameter&lt;Boolean&gt;,\n): MimiParameterApplicator {\n    // Add the Applicator to the param, delegating the calls to your\n    // custom applicator logic\n    val applicator = isEnabledParam.addApplicator(\n      APPLY_TIMEOUT,\n      isEnabledApplicator::apply,\n    )\n\n    // Causes the isEnabled ProcessingParameter to push its current\n    // value to the newly added Applicator\n    isEnabledParam.synchronizeApplicators()\n    return applicator\n}\n</code></pre> Next, add the applicator to active session inside <code>activateProcessingSession()</code>:</p> <pre><code>var isEnabledApplicatorRef: MimiParameterApplicator? = null\n\nprivate suspend fun activateProcessingSession() {\n    val processingController = MimiCore.processingController\n    processingController.activateSession(getTechLevelFromFirmware())\n\n    // Wire up the applicator to the activeSession\n    isEnabledApplicatorRef = addIsEnabledApplicator(activeSession.isEnabled)\n\n    // add more applicators here for intensity and preset\n}\n</code></pre> <p>Retain the <code>applicator</code> reference so that you can later remove it from the <code>ProcessingParameter</code>. </p> <p>Once an <code>Applicator</code> has been removed, it will no longer receive updates from the <code>ProcessingParameter</code>.</p> <p>Example: Removing Applicator</p> <pre><code>// Removes the Applicator from its ProcessingParameter so it won't receive \n// further updates.\nprivate fun removeIsEnabledApplicator() {\n    isEnabledApplicatorRef?.remove()\n}\n</code></pre>"},{"location":"processing/#setting-a-value","title":"Setting a value","text":"<pre><code>// To force set a value on a Parameter\n// Usage: setIsEnabledParam(true)\nfun setIsEnabledParam(flag: Boolean) {\n    isEnabledApplicator.apply(flag)\n}\n</code></pre>"},{"location":"profile/","title":"Profile","text":""},{"location":"profile/#components","title":"Components","text":""},{"location":"profile/#mimiprofilefragment","title":"<code>MimiProfileFragment</code>","text":"<p>The Mimi Profile Fragment (<code>io.mimi.sdk.profile.MimiProfileFragment</code>) is the MSDK UI entry-point which provides features for users to onboard and personalize their sound. In addition, login and signup options are also provided, allowing users to load their previously created Mimi data or save their current data with a Mimi account.</p> <p></p> <p>The simplest way to add <code>MimiProfileFragment</code> is via including in an XML layout.</p> <pre><code>&lt;androidx.fragment.app.FragmentContainerView\n        android:id=\"@+id/mimiProfileFragment\"\n        android:name=\"io.mimi.sdk.profile.MimiProfileFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"center\" /&gt;\n</code></pre> <p>You can also dynamically add a <code>MimiProfileFragment</code> instance to your layouts through the standard Android <code>FragmentManager</code> mechanism.</p>"},{"location":"profile/#theming","title":"Theming","text":"<p>Once you have integrated the UI components, you need to setup the Mimi theme. This is important because without setting it up, your app will crash when attempting to inflate the Mimi UI components.</p> <p>Now navigate to <code>AndroidManifest.xml</code> and check your <code>&lt;application&gt;</code> tag. Usually there is a theme already defined. Let's assume it is called <code>AppTheme</code>.</p> <pre><code>&lt;application\n    ...\n    android:theme=\"@style/AppTheme\" &gt;\n</code></pre> <p>Now navigate to where <code>AppTheme</code> is defined (should be in <code>styles.xml</code> or <code>theme.xml</code> file under <code>res</code>) and replace value for <code>parent</code> with <code>Theme.Mimi</code></p> <pre><code>&lt;style name=\"AppTheme\" parent=\"Theme.Mimi\"&gt;\n</code></pre> <p>Now, run your app. Everything should be functional.</p>"},{"location":"profile/#read-core-docs-for-theming","title":"Read core docs for Theming","text":""}]}